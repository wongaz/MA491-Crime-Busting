load("~/SchoolWork/MA386/PrecipData.RData")
coord <- matrix(c(Rain$Longitude,Rain$Latitude),ncol=2)
Rain<-Precip.df
coord <- matrix(c(Rain$Longitude,Rain$Latitude),ncol=2)
PatomaDistance <- distm(coord, PatonaBayMarina)
CulverDist <- distm(coord,CulverMarina)
MorseDistance <- distm(coord,MorseMarina)
Rain$PatonaDistance <-PatomaDistance/1000
Rain$CulverDistance <-CulverDist/1000
Rain$MorseMarina <- MorseDistance/1000
#Linear Model for Patona
lm(Total.Precip~PatonaDistance,data = topPatona)
#Create Location Matrix
coord <- matrix(c(Rain$Longitude,Rain$Latitude),ncol=2)
#Create Distance Vector
PatomaDistance <- distm(coord, PatonaBayMarina)
CulverDist <- distm(coord,CulverMarina)
MorseDistance <- distm(coord,MorseMarina)
#Inserting back to datatable
Rain$PatonaDistance <-PatomaDistance/1000
Rain$CulverDistance <-CulverDist/1000
Rain$MorseMarina <- MorseDistance/1000
#Gets the Top for Patona
arrange(Rain, c(PatonaDistance))
topPatona <- Rain[1:5,]
#Gets the Top for Culver and removes the na
arrange(Rain,c(CulverDistance))
topCulver <- Rain[1:5,]
topCulver2 <- na.omit(topCulver)
#Gets the Top for Morse
arrange(Rain,c(MorseMarina))
topMorse <- Rain[1:5,]
#Linear Model for Patona
lm(Total.Precip~PatonaDistance,data = topPatona)
#linear Model for Culver
lm(Total.Precip~CulverDistance,data = topCulver2)
#Linear Model for Morse
lm(Total.Precip~MorseMarina,data=topMorse)
#Create Location Matrix
coord <- matrix(c(Rain$Longitude,Rain$Latitude),ncol=2)
library(dplyr)
library(geosphere)
Rain<-load("~/SchoolWork/MA386/PrecipData.RData")
PatonaBayMarina <- c(-85.7812,41.3356)
CulverMarina<-c(-118.451745,33.980289)
MorseMarina<-c(-86.0338,40.0935)
#Create Location Matrix
coord <- matrix(c(Rain$Longitude,Rain$Latitude),ncol=2)
load("~/SchoolWork/MA386/PrecipData.RData")
rangeinMiles = 40.2336
withInPatona = filter(Rain,PatonaDistance<rangeinMiles)
withinCulver = filter(Rain,CulverDistance<rangeinMiles)
withInMorse = filter(Rain,MorseMarina<rangeinMiles)
lm(Total.Precip~PatonaDistance,data = withInPatona)
lm(Total.Precip~CulverDistance,data = withinCulver)
lm(Total.Precip~MorseMarina,data=withInMorse)
rangeinMiles = 40.2336
withInPatona = filter(Rain,PatonaDistance<rangeinMiles)
withinCulver = filter(Rain,CulverDistance<rangeinMiles)
withInMorse = filter(Rain,MorseMarina<rangeinMiles)
lm(Total.Precip~PatonaDistance,data = withInPatona)
lm(Total.Precip~CulverDistance,data = withinCulver)
lm(Total.Precip~MorseMarina,data=withInMorse)
rangeinMiles = 40.2336
withInPatona = filter(Rain,PatonaDistance<rangeinMiles)
withinCulver = filter(Rain,CulverDistance<rangeinMiles)
withInMorse = filter(Rain,MorseMarina<rangeinMiles)
lm(Total.Precip~PatonaDistance,data = withInPatona)
lm(Total.Precip~CulverDistance,data = withinCulver)
lm(Total.Precip~MorseMarina,data=withInMorse)
rangeinMiles = 40.2336
withInPatona = filter(Rain,PatonaDistance<rangeinMiles)
withinCulver = filter(Rain,CulverDistance<rangeinMiles)
withInMorse = filter(Rain,MorseMarina<rangeinMiles)
lm(Total.Precip~PatonaDistance,data = withInPatona)
lm(Total.Precip~CulverDistance,data = withinCulver)
lm(Total.Precip~MorseMarina,data=withInMorse)
rangeinMiles = 40.2336
withInPatona = filter(Rain,PatonaDistance<rangeinMiles)
withinCulver = filter(Rain,CulverDistance<rangeinMiles)
withInMorse = filter(Rain,MorseMarina<rangeinMiles)
lm(Total.Precip~PatonaDistance,data = withInPatona)
lm(Total.Precip~CulverDistance,data = withinCulver)
lm(Total.Precip~MorseMarina,data=withInMorse)
library(dplyr)
library(dplyr)
library(geosphere)
Rain<-Precip.df
#North is Positive
#South is Negative #West is Negative #East is Positve
PatonaBayMarina <- c(-85.7812,41.3356)
CulverMarina<-c(-118.451745,33.980289)
MorseMarina<-c(-86.0338,40.0935)
#Create Location Matrix
coord <- matrix(c(Rain$Longitude,Rain$Latitude),ncol=2)
#Create Distance Vector
PatomaDistance <- distm(coord, PatonaBayMarina)
CulverDist <- distm(coord,CulverMarina)
MorseDistance <- distm(coord,MorseMarina)
#Inserting back to datatable
Rain$PatonaDistance <-PatomaDistance/1000
Rain$CulverDistance <-CulverDist/1000
Rain$MorseMarina <- MorseDistance/1000
#Gets the Top for Patona
arrange(Rain, c(PatonaDistance))
topPatona <- Rain[1:5,]
#Gets the Top for Culver and removes the na
arrange(Rain,c(CulverDistance))
topCulver <- Rain[1:5,]
topCulver2 <- na.omit(topCulver)
#Gets the Top for Morse
arrange(Rain,c(MorseMarina))
topMorse <- Rain[1:5,]
#Linear Model for Patona
lm(Total.Precip~PatonaDistance,data = topPatona)
#linear Model for Culver
lm(Total.Precip~CulverDistance,data = topCulver2)
#Linear Model for Morse
lm(Total.Precip~MorseMarina,data=topMorse)
rangeinMiles = 40.2336
withInPatona = filter(Rain,PatonaDistance<rangeinMiles)
withinCulver = filter(Rain,CulverDistance<rangeinMiles)
withInMorse = filter(Rain,MorseMarina<rangeinMiles)
lm(Total.Precip~PatonaDistance,data = withInPatona)
lm(Total.Precip~CulverDistance,data = withinCulver)
lm(Total.Precip~MorseMarina,data=withInMorse)
withinCulver = filter(Rain,CulverDistance<rangeinMiles)
topPatona = arrange(Rain, c(PatonaDistance))[1:5,]
topCulver<- arrange(Rain,c(CulverDistance))[1:5,]
topCulver2 <- na.omit(topCulver)
topMorse = arrange(Rain,c(MorseMarina))[1:5,]
lm(Total.Precip~PatonaDistance,data = topPatona)
lm(Total.Precip~CulverDistance,data = topCulver2)
lm(Total.Precip~MorseMarina,data=topMorse)
rangeinMiles = 40.2336
withInPatona = filter(Rain,PatonaDistance<rangeinMiles)
withinCulver = filter(Rain,CulverDistance<rangeinMiles)
withInMorse = filter(Rain,MorseMarina<rangeinMiles)
lm(Total.Precip~PatonaDistance,data = withInPatona)
lm(Total.Precip~CulverDistance,data = withinCulver)
lm(Total.Precip~MorseMarina,data=withInMorse)
install.packages("ggplot2")
install.packages("readr")
library(tidyverse)
install.packages("tidyverse")
library(tidyverse)
library(tidyverse)
install.packages("tidyverse", dependencies = FALSE)
set.seed(20171006)
p0 = 0.5
p1 =0.1
n<-seq(5,200,1)
m =5
p.value = replicate(m,{
num.heads <- sample(c("Heads","Tails"),
size= n,
prob = c(p1,1-p1),
replace = TRUE)
})
p.value
p.value = replicate(m,{
num.heads <- sample(c("Heads","Tails"),
size= n,
prob = c(p1,1-p1),
replace = TRUE)
})
set.seed(20171006)
p0 = 0.5
p1 =0.1
ns<-seq(5,200,1)
m =5
p.value = replicate(m,{
for(n in ns){
num.heads <- sample(c("Heads","Tails"),
size= n,
prob = c(p1,1-p1),
replace = TRUE)%>%
sum(.=="Heads")
}
})
p.value = replicate(m,{
num.heads = rbinom(length(ns),size = ns, prob = p1)
})
p.value = replicate(m,{
num.heads = rbinom(length(ns),size = ns, prob = p1)
})
p.values = replicate(m,{
num.heads = rbinom(length(ns),size = ns, prob = p1)
pval <- numeric(0)
for(i in 1:len(ns)){
pval[i] <- binom.test(num.heads[i],ns[i],p0)$p.value
}
pval
})
p.values = replicate(m,{
num.heads = rbinom(length(ns),size = ns, prob = p1)
pval <- numeric(0)
for(i in 1:length(ns)){
pval[i] <- binom.test(num.heads[i],ns[i],p0)$p.value
}
pval
})
View(p.values)
m =10000
p.values = replicate(m,{
num.heads = rbinom(length(ns),size = ns, prob = p1)
pval <- numeric(0)
for(i in 1:length(ns)){
pval[i] <- binom.test(num.heads[i],ns[i],p0)$p.value
}
pval
})
power <- apply(p.values<0.05,1,mean)
library(ggplot2)
ggplot(data = data.frame(power = power,n =ns),mapping = aes(x=ns,y=power))+
geom_line()+
geom_hline(yintercept = 0.95)+
labs(x="sample size",y="power")+
theme_bw(12)
p0 = 0.5
p1 =0.1
ns<-seq(5,200000,1)
m =10000
p.values = replicate(m,{
num.heads = rbinom(length(ns),size = ns, prob = p1)
pval <- numeric(0)
for(i in 1:length(ns)){
pval[i] <- binom.test(num.heads[i],ns[i],p0)$p.value
}
pval
})
set.seed(20171006)
p0 = 0.5
p1 =0.1
ns<-seq(5,200000,1)
m =5000
p.values = replicate(m,{
num.heads = rbinom(length(ns),size = ns, prob = p1)
pval <- numeric(0)
for(i in 1:length(ns)){
pval[i] <- binom.test(num.heads[i],ns[i],p0)$p.value
}
pval
})
ggplot(data = data.frame(power = power,n =ns),mapping = aes(x=ns,y=power))+
geom_line()+
geom_hline(yintercept = 0.95)+
labs(x="sample size",y="power")+
theme_bw(12)
set.seed(20171006)
p0 = 0.5
p1 =0.1
ns<-seq(5,200000,1)
m =5000
p.values = replicate(m,{
for(n in ns){
num.heads <- sample(c("Heads","Tails"),
size= n,
prob = c(p1,1-p1),
replace = TRUE)%>%
sum(.=="Heads")
}
})
p.values = replicate(m,{
num.heads = rbinom(length(ns),size = ns, prob = p1)
pval <- numeric(0)
for(i in 1:length(ns)){
pval[i] <- binom.test(num.heads[i],ns[i],p0)$p.value
}
pval
})
Appledat1 <- rep(c("Red", "Green", "Yellow"), times = c(5,5,6))
Appledat2 <- rep(c("Red", "Green", "Yellow"), times = c(2,6,4))
dat <- data_frame(
response = c(Appledat1, Appledat2),
Group = rep(c(1,2), times = c(16,12))
)
library(tidyverse)
library(dplyr)
Appledat1 <- rep(c("Red", "Green", "Yellow"), times = c(5,5,6))
Appledat2 <- rep(c("Red", "Green", "Yellow"), times = c(2,6,4))
dat <- data_frame(
response = c(Appledat1, Appledat2),
Group = rep(c(1,2), times = c(16,12))
)
exp <- length(Appledat1)/3
stat <- sum(((table(Appledat1)-exp)^2)/exp)
set.seed(20171017)
boot.stat <- replicate(10000,{
#Generates Data Under H0
dat <- sample(c("Red", "Green", "Yellow"),
size = 16,
prob = c( 1/3,1/3,1/3),
replace = TRUE)
#compute test stat for bootstrap replicate
t.star <-  sum(((table(dat)-exp)^2)/exp)
t.star
})
mean(boot.stat >= stat)
set.seed(20171007)
perm.stat <- replicate(10000, {
#Permute Data
dat.star <-  dat %>%
mutate(Group = sample(Group, replace = FALSE))
t.star <- dat.star %>%
group_by(Group) %>%
summarise(phat = mean(response == "Yellow")) %>%
arrange(Group) %>%
ungroup() %>%
summarise(Ratio = phat[1]/phat[2]) %>%
as.numeric()
t.star
})
stat2 <- dat %>%
group_by(Group) %>%
summarise(phat = mean(response == "Yellow")) %>%
arrange(Group) %>%
ungroup() %>%
summarise(Ratio = phat[1]/phat[2]) %>%
as.numeric()
mean(perm.stat >= stat2)
signed <- rep(c("Yes","No"), times = c(3208,3143))
unsigned <- rep(c("Yes", "No"), times = c(730,942))
dat <- data_frame(
response = c(signed,unsigned),
Group = rep(c(1,2), times = c(length(signed),length(unsigned)))
)
set.seed(20171007)
perm.stat <- replicate(10000, {
#Permute Data
dat.star <-  dat %>%
mutate(Group = sample(Group, replace = FALSE))
t.star <- dat.star %>%
group_by(Group) %>%
summarise(phat = mean(response == "Yes")) %>%
arrange(Group) %>%
ungroup() %>%
summarise(Ratio = phat[1]/phat[2]) %>%
as.numeric()
t.star
})
stat2 <- dat %>%
group_by(Group) %>%
summarise(phat = mean(response == "Yes")) %>%
arrange(Group) %>%
ungroup() %>%
summarise(Ratio = phat[1]/phat[2]) %>%
as.numeric()
mean(perm.stat >= stat2)
setwd("~/SchoolWork/MA491-IntroToMathematicalModeling/CrimeBusting")
library(readr)
Not <- read_csv("~/SchoolWork/MA491-IntroToMathematicalModeling/CrimeBusting/Not.csv")
View(Not)
Not <- read_csv("~/SchoolWork/MA491-IntroToMathematicalModeling/CrimeBusting/Not.csv")
Messages <- read_csv("~/SchoolWork/MA491-IntroToMathematicalModeling/CrimeBusting/Messages.csv")
Suspicious <- read_csv("~/SchoolWork/MA491-IntroToMathematicalModeling/CrimeBusting/Suspicious.csv")
y1<-Not$Not[1:length(8)]
y2 <-Suspicious$Suspicious[1:7]
y1<-Not$Not[1:8]
y2 <-Suspicious$Suspicious[1:7]
y1<-Not$Not[1:7]
y2 <-Suspicious$Suspicious[1:8]
y2 <-Suspicious$Suspicious[1:6]
y2 <-Suspicious$Suspicious[1:7]
Not <- read_csv("~/SchoolWork/MA491-IntroToMathematicalModeling/CrimeBusting/Not.csv")
Suspicious <- read_csv("~/SchoolWork/MA491-IntroToMathematicalModeling/CrimeBusting/Suspicious.csv")
y1<-Not$Not[1:7]
y2 <-Suspicious$Suspicious[1:7]
qqnorm(y1,datax=T,ylab="HDM",pch=16, main = "Q-Q Plot for Hard Puzzle")
qqnorm(y1,datax=T,ylab="HDM",pch=16, main = "Q-Q Plot for Hard Puzzle")
qqnorm(y2,datax=T,ylab="HDM",pch=16, main ="Q-Q Plot for AI Escargot")
samplemean <- function(x, d) {
return(mean(x[d]))
}
boot_y1_mean <- boot(y1,samplemean,10000)
boot_y1_mean
boot_y2_mean <- boot(y2,samplemean,10000)
var(y2)
samplemean <- function(x, d) {
return(mean(x[d]))
}
boot_y1_mean <- boot(y1,samplemean,10000)
library(boot)
boot_y1_mean <- boot(y1,samplemean,10000)
boot_y1_mean
boot_y2_mean <- boot(y2,samplemean,10000)
boot_y2_mean
var(boot_y2_mean$t)
plot(boot_y1_mean)
plot(boot_y2_mean)
mean_values <- boot_y1_mean$t
quantile(mean_values,0.05)
library(boot)
Not <- read_csv("~/SchoolWork/MA491-IntroToMathematicalModeling/CrimeBusting/Not.csv")
Suspicious <- read_csv("~/SchoolWork/MA491-IntroToMathematicalModeling/CrimeBusting/Suspicious.csv")
y1<-Not$Not[1:7]
y2 <-Suspicious$Suspicious[1:7]
qqnorm(y1,datax=T,ylab="HDM",pch=16, main = "Q-Q Plot for Hard Puzzle")
qqnorm(y2,datax=T,ylab="HDM",pch=16, main ="Q-Q Plot for AI Escargot")
var(y2)
samplemean <- function(x, d) {
return(mean(x[d]))
}
boot_y1_mean <- boot(y1,samplemean,10000)
boot_y1_mean
boot_y2_mean <- boot(y2,samplemean,10000)
boot_y2_mean
var(boot_y2_mean$t)
plot(boot_y1_mean)
plot(boot_y2_mean)
mean_values <- boot_y1_mean$t
quantile(mean_values,0.05)
y1<-Not$Not[1:8]
y2 <-Suspicious$Suspicious[1:7]
library(boot)
Not <- read_csv("~/SchoolWork/MA491-IntroToMathematicalModeling/CrimeBusting/Not.csv")
Suspicious <- read_csv("~/SchoolWork/MA491-IntroToMathematicalModeling/CrimeBusting/Suspicious.csv")
y1<-Not$Not[1:8]
y2 <-Suspicious$Suspicious[1:7]
qqnorm(y1,datax=T,ylab="HDM",pch=16, main = "Q-Q Plot for Hard Puzzle")
qqnorm(y2,datax=T,ylab="HDM",pch=16, main ="Q-Q Plot for AI Escargot")
var(y2)
samplemean <- function(x, d) {
return(mean(x[d]))
}
boot_y1_mean <- boot(y1,samplemean,10000)
boot_y1_mean
boot_y2_mean <- boot(y2,samplemean,10000)
boot_y2_mean
var(boot_y2_mean$t)
plot(boot_y1_mean)
plot(boot_y2_mean)
mean_values <- boot_y1_mean$t
quantile(mean_values,0.05)
library(tm)
print(getwd())
install.packages("tm")
library(tm)
library(tm)
sms_data<-read.csv("sms_spam.csv",stringsAsFactors = FALSE)
print(head(sms_data))
sms_data$type<-factor(sms_data$type)
simply_text<-Corpus(VectorSource(sms_data$text))
cleaned_corpus<-tm_map(simply_text, tolower)
cleaned_corpus<-tm_map(cleaned_corpus,removeNumbers)
install.packages("tm")
Not <- read_csv("~/SchoolWork/MA491-IntroToMathematicalModeling/CrimeBusting/Not.csv")
Not <- read_csv("~/SchoolWork/MA491-IntroToMathematicalModeling/CrimeBusting/Not.csv")
Suspicious <- read_csv("~/SchoolWork/MA491-IntroToMathematicalModeling/CrimeBusting/Suspicious.csv")
library(readr)
Suspicious <- read_csv("~/SchoolWork/MA491-IntroToMathematicalModeling/CrimeBusting/Suspicious.csv")
View(Suspicious)
val = Not$
y2 <-Suspicious$Z[1:7]
Suspicious <- read_csv("~/SchoolWork/MA491-IntroToMathematicalModeling/CrimeBusting/Suspicious.csv")
val = Not$
y2 <-Suspicious$Z[1:7]
val = Not$
y2 <-Suspicious$Z[1:7]
y1<-Not$Z[1:8]
y2 <-Suspicious$Z[1:7]
qqnorm(y1,datax=T,ylab="HDM",pch=16, main = "Q-Q Plot for Hard Puzzle")
qqnorm(y2,datax=T,ylab="HDM",pch=16, main ="Q-Q Plot for AI Escargot")
qqnorm(y1,datax=T,ylab="HDM",pch=16, main = "Q-Q Plot for Hard Puzzle")
qqnorm(y2,datax=T,ylab="HDM",pch=16, main ="Q-Q Plot for AI Escargot")
qqnorm(y1,datax=T,ylab="HDM",pch=16, main = "Q-Q Plot for Hard Puzzle")
qqnorm(y2,datax=T,ylab="HDM",pch=16, main ="Q-Q Plot for AI Escargot")
var(y2)
samplemean <- function(x, d) {
return(mean(x[d]))
}
boot_y1_mean <- boot(y1,samplemean,10000)
boot_y1_mean
boot_y2_mean <- boot(y2,samplemean,10000)
boot_y2_mean
var(boot_y2_mean$t)
plot(boot_y1_mean)
plot(boot_y2_mean)
mean_values <- boot_y1_mean$t
quantile(mean_values,0.05)
mean(y2)
mean(y1)
quantile(mean_values,0.05)
boot.ci(results, type="bca")
boot.ci(boot_y1_mean.t)
boot_y1_mean <- boot(y1,samplemean,10000)
boot_y1_mean
boot_y2_mean <- boot(y2,samplemean,10000)
boot_y2_mean
var(boot_y2_mean$t)
plot(boot_y1_mean)
plot(boot_y2_mean)
mean_values <- boot_y1_mean$t
quantile(mean_values,0.05)
boot.ci(boot_y1_mean.t)
ci(boot_y1_mean.t)
(boot_y1_mean.t)
ci(boot_y1_mean$t)
boot.ci(boot_y1_mean, type="bca")
boot.ci(boot_y2_mean, type="bca")
boot.ci(boot_y1_mean, type="norm")
boot.ci(boot_y2_mean, type="norm")
Suspicious2 <- read_csv("~/SchoolWork/MA491-IntroToMathematicalModeling/CrimeBusting/Sus.csv")
y3 <- Suspicious2[4:11]
y3 <- Suspicious2$Z[4:11]
y3
boot_y3_mean <- boot(y3,samplemean,10000)
boot_y3_mean
plot(boot_y3_mean)
boot.ci(boot_y3_mean, type="norm")
boot.ci(boot_y2_mean, type="norm")
boot.ci(boot_y3_mean, type="norm")
